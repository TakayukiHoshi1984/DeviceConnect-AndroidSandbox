# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: dConnectManager CI

on: [push, pull_request]

jobs:
    libmedia:
      name: libmedia release
      runs-on: macos-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Install JDK 1.8
          uses: actions/setup-java@v1
          with:
            java-version: 1.8
        - name: Install Android SDK
          uses: malinskiy/action-android/install-sdk@release/0.0.5
        - name: Build project
          env:
            GPR_USER: ${{ secrets.GPR_USER }}
            GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
          run: |
            cd dConnectSDK/dConnectLibStreaming/
            chmod +x ./gradlew
            cd libmedia
            ../gradlew assembleRelease
        - name: Publish AAR
          env:
            GPR_USER: ${{ secrets.GPR_USER }}
            GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
          run: |
            cd dConnectSDK/dConnectLibStreaming/
            chmod +x ./gradlew
            cd libmedia
            ../gradlew assembleRelease publish
        - name: Upload aar file
          if: always()
          uses: actions/upload-artifact@v1
          with:
            name: Upload libmedia release aar
            path: dConnectSDK/dConnectLibStreaming/libmedia/build/outputs/aar/libmedia-release.aar
#     demolib:
#       name: Demo Lib release
#       runs-on: macos-latest
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v1
#         - name: Install JDK 1.8
#           uses: actions/setup-java@v1
#           with:
#             java-version: 1.8
#         - name: Install Android SDK
#           uses: malinskiy/action-android/install-sdk@release/0.0.5
#         - name: Build project
#           env:
#             GPR_USER: ${{ secrets.GPR_USER }}
#             GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
#           run: |
#             cd dConnectSDK/dConnectDemoLib/
#             chmod +x ./gradlew
#             ./gradlew assembleRelease
#         - name: Publish AAR
#           env:
#             GPR_USER: ${{ secrets.GPR_USER }}
#             GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
#           run: |
#             cd dConnectSDK/dConnectDemoLib/
#             chmod +x ./gradlew
#             ./gradlew assembleRelease publish
#         - name: Upload aar file
#           if: always()
#           uses: actions/upload-artifact@v1
#           with:
#             name: Upload dconnect-demo-lib release aar
#             path: dConnectSDK/dConnectDemoLib/dconnect-demo-lib/build/outputs/aar/dconnect-demo-lib-release.aar
  #   name: SDKForAndroid release
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #     - name: Install JDK 1.8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #     - name: Install Android SDK
  #       uses: malinskiy/action-android/install-sdk@release/0.0.5
  #     - name: Build project
  #       env:
  #         GPR_USER: ${{ secrets.GPR_USER }}
  #         GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
  #       run: |
  #         cd dConnectSDK/dConnectSDKForAndroid/
  #         chmod +x ./gradlew
  #         ./gradlew assembleRelease
  #     - uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
  #       with:
  #         cmd: sh sdk-for-android-test.sh
  #         api: 28
  #         tag: default
  #         abi: x86
  #         cmdOptions: -no-snapshot-save -noaudio -no-boot-anim -timezone Asia/Tokyo
  #     - name: Generate Javadoc For SDK
  #       if: always()
  #       run: |
  #         cd dConnectSDK/dConnectSDKForAndroid/
  #         ./gradlew generateJavadocForSDK
  #     - name: Generate Javadoc For SDKJUnit
  #       if: always()
  #       run: |
  #         cd dConnectSDK/dConnectSDKForAndroid/
  #         ./gradlew generateJavadocForSDKJUnit
  #     - name: Publish AAR
  #       env:
  #         GPR_USER: ${{ secrets.GPR_USER }}
  #         GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
  #       run: |
  #         cd dConnectSDK/dConnectSDKForAndroid/
  #         chmod +x ./gradlew
  #         ./gradlew assembleRelease publish
  #     - name: Upload apk file
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: Upload dconnect-sdk-for-android release aar
  #         path: dConnectSDK/dConnectSDKForAndroid/dconnect-sdk-for-android/build/outputs/aar/dconnect-sdk-for-android-release.aar
  #     - name: Pack test result and document in zip file
  #       if: always()
  #       run: |
  #         cd dConnectSDK/dConnectSDKForAndroid/
  #         sudo zip -r DeviceConnectSDK-Javadoc.zip ./DeviceConnectSDK-Javadoc
  #         sudo zip -r DeviceConnectSDK-JUnit-Javadoc.zip ./DeviceConnectSDK-JUnit-Javadoc
  #         cd dconnect-sdk-for-android/build/reports/androidTests
  #         sudo mv connected DeviceConnectSDK-JUnit-Report
  #         sudo zip -r DeviceConnectSDK-JUnit-Report.zip ./DeviceConnectSDK-JUnit-Report
  #     - name: Archive code coverage results
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: DeviceConnectSDK-JUnit-Report
  #         path: dConnectSDK/dConnectSDKForAndroid/dconnect-sdk-for-android/build/reports/androidTests/DeviceConnectSDK-JUnit-Report.zip
  #     - name: Archive DeviceConnectSDK-Javadoc
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: DeviceConnectSDK-Javadoc
  #         path: dConnectSDK/dConnectSDKForAndroid/DeviceConnectSDK-Javadoc.zip
  #     - name: Archive DeviceConnectSDK-Javadoc
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: DeviceConnectSDK-JUnit-Javadoc
  #         path: dConnectSDK/dConnectSDKForAndroid/DeviceConnectSDK-JUnit-Javadoc.zip
#     devicepluginsdk:
#       name: DevicePluginSDK release
#       runs-on: macos-latest
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v1
#         - name: Install JDK 1.8
#           uses: actions/setup-java@v1
#           with:
#             java-version: 1.8
#         - name: Install Android SDK
#           uses: malinskiy/action-android/install-sdk@release/0.0.5
#         - name: Build project
#           env:
#             GPR_USER: ${{ secrets.GPR_USER }}
#             GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
#           run: |
#             cd dConnectDevicePlugin/dConnectDevicePluginSDK/
#             chmod +x ./gradlew
#             ./gradlew assembleRelease
#         - uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
#           with:
#             cmd: sh device-plugin-sdk-test.sh
#             api: 28
#             tag: default
#             abi: x86
#             cmdOptions: -no-snapshot-save -noaudio -no-boot-anim -timezone Asia/Tokyo
#         - name: Test For DevicePluginSDK
#           if: always()
#           run: |
#             cd dConnectDevicePlugin/dConnectDevicePluginSDK/
#             chmod +x ./gradlew
#             ./gradlew test
#             ls dconnect-device-plugin-sdk/build/reports/
#         - name: Generate Javadoc For DevicePluginSDK
#           if: always()
#           run: |
#             cd dConnectDevicePlugin/dConnectDevicePluginSDK/
#             ./gradlew generateJavadocForPlugin
#         - name: Publish AAR
#           env:
#             GPR_USER: ${{ secrets.GPR_USER }}
#             GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
#           run: |
#             cd dConnectDevicePlugin/dConnectDevicePluginSDK/
#             chmod +x ./gradlew
#             ./gradlew assembleRelease publish
#         - name: Upload aar file
#           if: always()
#           uses: actions/upload-artifact@v1
#           with:
#             name: Upload dconnect-device-plugin-sdk release aar
#             path: dConnectDevicePlugin/dConnectDevicePluginSDK/dconnect-device-plugin-sdk/build/outputs/aar/dconnect-device-plugin-sdk-release.aar
#         - name: Pack test result and document in zip file
#           if: always()
#           run: |
#             cd dConnectDevicePlugin/dConnectDevicePluginSDK/
#             sudo zip -r DevicePluginSDK-Javadoc.zip ./DevicePluginSDK-Javadoc
#             cd dconnect-device-plugin-sdk/build/reports/androidTests
#             sudo mv connected DevicePluginSDK-JUnit-Report
#             sudo zip -r DevicePluginSDK-JUnit-Report.zip ./DevicePluginSDK-JUnit-Report
#             cd ../tests
#             sudo mv testDebugUnitTest DevicePluginSDK-Profile-JUnit-Report
#             sudo zip -r DevicePluginSDK-Profile-JUnit-Report.zip ./DevicePluginSDK-Profile-JUnit-Report
#         - name: Archive code coverage results (Android JUnit)
#           if: always()
#           uses: actions/upload-artifact@v1
#           with:
#             name: DevicePluginSDK-JUnit-Report
#             path: dConnectDevicePlugin/dConnectDevicePluginSDK/dconnect-device-plugin-sdk/build/reports/androidTests/DevicePluginSDK-JUnit-Report.zip
#         - name: Archive code coverage results (JUnit)
#           if: always()
#           uses: actions/upload-artifact@v1
#           with:
#             name: DevicePluginSDK-Profile-JUnit-Report
#             path: dConnectDevicePlugin/dConnectDevicePluginSDK/dconnect-device-plugin-sdk/build/reports/tests/DevicePluginSDK-Profile-JUnit-Report.zip
#         - name: Archive DevicePluginSDK-Javadoc
#           if: always()
#           uses: actions/upload-artifact@v1
#           with:
#             name: DevicePluginSDK-Javadoc
#             path: dConnectDevicePlugin/dConnectDevicePluginSDK/DevicePluginSDK-Javadoc.zip
  # manager:
  #   name: Manager Release
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #     - name: Install JDK 1.8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #     - name: Install Android SDK
  #       uses: malinskiy/action-android/install-sdk@release/0.0.5
  #     - name: Generate Javadoc For SDKJUnit
  #       if: always()
  #       run: |
  #         cd dConnectManager/dConnectManager
  #         chmod +x ./gradlew
  #         ./gradlew generateJavadocForManagerJUnit
  #     - name: Build Manager project
  #       env:
  #         GPR_USER: ${{ secrets.GPR_USER }}
  #         GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
  #       run: |
  #         cd dConnectManager/dConnectManager
  #         echo ${{ secrets.ANDROID_REALSE_BASE64_KEY }} | base64 -d > ./release-application-key
  #         echo "RELEASE_STORE_FILE=`pwd`/release-application-key" >> ./local.properties
  #         echo "RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_REALSE_KEY_PASSWORD }}" >> ./local.properties
  #         echo "RELEASE_KEY_ALIAS=deviceconnect" >> ./local.properties
  #         echo "RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_REALSE_KEY_PASSWORD }}" >> ./local.properties
  #         chmod +x ./gradlew
  #         ./gradlew assembleRelease
  #     - name: Build Test Plug-in project
  #       env:
  #         GPR_USER: ${{ secrets.GPR_USER }}
  #         GPR_API_KEY: ${{ secrets.GPR_API_KEY }}
  #       run: |
  #         cd dConnectDevicePlugin/dConnectDeviceTest
  #         chmod +x ./gradlew
  #         ./gradlew assembleDebug
  #     - uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
  #       with:
  #         cmd: sh emulator-install.sh
  #         api: 28
  #         tag: default
  #         abi: x86
  #         hardwareProfile: -c 4096M
  #         cmdOptions: -partition-size 4096 -memory 4096 -no-snapshot-load -cache-size 4096 -writable-system -no-snapshot-save -noaudio -no-boot-anim -timezone Asia/Tokyo
  #     - name: Save logcat output(dconnect-manager-test-report)
  #       uses: actions/upload-artifact@master
  #       if: failure()
  #       with:
  #         name: logcat
  #         path: artifacts/logcat.log
  #     - name: Pack test result and document in zip file(Manager Test Javadoc)
  #       if: always()
  #       run: |
  #         ls
  #         cd dConnectManager/dConnectManager
  #         sudo zip -r DeviceConnectManager-JUnit-Javadoc.zip ./DeviceConnectManager-JUnit-Javadoc
  #     - name: Pack test result and document in zip file(Manager Test)
  #       if: always()
  #       run: |
  #         ls
  #         cd dConnectManager/dConnectManager/dconnect-manager-app/build/reports/androidTests
  #         sudo mv connected dconnect-manager-test-report
  #         sudo zip -r dconnect-manager-test-report.zip ./dconnect-manager-test-report
  #     - name: Archive code coverage results(Manager Test)
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: dconnect-manager-test-report
  #         path: dConnectManager/dConnectManager/dconnect-manager-app/build/reports/androidTests/dconnect-manager-test-report.zip
  #     - name: Archive DeviceConnectManager-JUnit-Javadoc
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: DeviceConnectManager-JUnit-Javadoc
  #         path: dConnectManager/dConnectManager/DeviceConnectManager-JUnit-Javadoc.zip
  #     - name: Upload apk file(Manager)
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: Upload Manager release apk
  #         path: dConnectManager/dConnectManager/dconnect-manager-app/build/outputs/apk/release/dconnect-manager-app-release.apk
  #     - name: Upload apk file(Test Plug-in)
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: Upload Test Plug-in release apk
  #         path: dConnectDevicePlugin/dConnectDeviceTest/app/build/outputs/apk/debug/app-debug.apk
  # server:
  #   name: dConnectServer Release
  #   needs: manager
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #     - name: Install JDK 1.8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #     - name: Install Android SDK
  #       uses: malinskiy/action-android/install-sdk@release/0.0.5
  #     - uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
  #       with:
  #         cmd: sh nano-httpd-test.sh
  #         api: 28
  #         tag: default
  #         abi: x86
  #         hardwareProfile: -c 4096M
  #         cmdOptions: -partition-size 4096 -memory 4096 -no-snapshot-load -cache-size 4096 -writable-system -no-snapshot-save -noaudio -no-boot-anim -timezone Asia/Tokyo
  #     - name: Save logcat output(dconnect-nano-httpd-test-report)
  #       uses: actions/upload-artifact@master
  #       if: failure()
  #       with:
  #         name: logcat
  #         path: artifacts/logcat.log
  #     - name: Pack test result and document in zip file(Nano-Httpd Test)
  #       if: always()
  #       run: |
  #         cd dConnectManager/dConnectServerNanoHttpd/nanohttpd/build/reports/androidTests
  #         sudo mv connected dconnect-nano-httpd-test-report
  #         sudo zip -r dconnect-nano-httpd-test-report.zip ./dconnect-nano-httpd-test-report
  #     - name: Archive code coverage results(Nano-Httpd Test)
  #       if: always()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: dconnect-nano-httpd-test-report
  #         path: dConnectManager/dConnectServerNanoHttpd/nanohttpd/build/reports/androidTests/dconnect-nano-httpd-test-report.zip
